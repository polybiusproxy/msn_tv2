<!-- ---------------------------------------------------------------------
//
//  Copyright 2003 Microsoft Corporation.  All Rights Reserved.
//
//  File:		MediaToolbar.htc
//
//  Description:
//				The Media Toolbar HTML behavior allows web authors to easily 
//				add a media toolbar to the Media Home Pages. The Media Toolbar
//				provides 2 standard links, one to all of the user's PCs and
//				one to the user's USB devices (if any).
//				Additional links may be added such as links to external sites.
//				The methods addTool() & addToolWithScript() add a link
//				to the toolbar. The method addHTML() will add an arbitary 
//				html element to the toolbar.
//
//-------------------------------------------------------------------- -->

<!-- To use this HTC, please include the following javascript files:
<script LANGUAGE=Javascript SRC="../Javascript/TVShell.js"></script>
<script language=javascript src="../Javascript/HomeNetworking.js"></script>
<script LANGUAGE=Javascript SRC="msntv:/Javascript/DMREnumerate.js"></script>
 -->

<PUBLIC:COMPONENT tagname="mediaToolbar" lightweight="true">

<PUBLIC:PROPERTY NAME="application" value="video" />
<PUBLIC:METHOD NAME="open" />
<PUBLIC:METHOD NAME="close" />
<PUBLIC:METHOD NAME="addTool" />
<PUBLIC:METHOD NAME="addToolWithScript" />
<PUBLIC:METHOD NAME="removeAllTools" />
<PUBLIC:METHOD NAME="refresh" />
<PUBLIC:METHOD NAME="gotoPCExplorer" />
<PUBLIC:METHOD NAME="gotoUSBExplorer" />
<PUBLIC:METHOD NAME="executeScript" />
<PUBLIC:METHOD NAME="scroll" />
<PUBLIC:METHOD NAME="scrollLeft" />
<PUBLIC:METHOD NAME="scrollRight" />

<PUBLIC:PROPERTY NAME="numCells"/>
<PUBLIC:PROPERTY NAME="pcsText" value="PCs" />
<PUBLIC:PROPERTY NAME="usbText" value="Devices" />
<PUBLIC:PROPERTY NAME="useArrows" value="true" />
<PUBLIC:PROPERTY NAME="useAlphaImageLoader" value="true" />
<PUBLIC:PROPERTY NAME="toolbarWidth" value="500"/>
<PUBLIC:PROPERTY NAME="toolbarStyle" />
<PUBLIC:PROPERTY NAME="divWidthPX" />
<PUBLIC:PROPERTY NAME="divStyle" />
<PUBLIC:PROPERTY NAME="divAlign" value="center" />
<PUBLIC:PROPERTY NAME="scrollIncrementPX" value="15" />
<PUBLIC:PROPERTY NAME="gutterPX" value="35" />
<PUBLIC:PROPERTY NAME="scrollFreqMS" value="1" />
<PUBLIC:PROPERTY NAME="hasInitialFocus" value="false" />
<PUBLIC:PROPERTY NAME="initialScrollCellIndex" value="1" />
<PUBLIC:PROPERTY NAME="cellContent" get="getCellContent" />
<PUBLIC:PROPERTY NAME="itemWidth" VALUE="100"/>
<PUBLIC:PROPERTY NAME="extraInterCellPadding" VALUE="0"/>
<PUBLIC:PROPERTY NAME="itemStyle" VALUE="font-family: Segoe TV; font: 18px bold; color: acdcf8;padding: 10;"/>

<PUBLIC:METHOD NAME="focus" />

<PUBLIC:ATTACH EVENT="onpropertychange" HANDLER="OnPropertyChange" />
<PUBLIC:ATTACH EVENT="oncontentready" HANDLER="OnInit" />
<PUBLIC:ATTACH EVENT="onkeydown" HANDLER="OnKeydownHandler" />
<PUBLIC:ATTACH EVENT="ondocumentready" HANDLER="OnDocReady" />
<PUBLIC:DEFAULTS style="overflow:hidden;" />
<SCRIPT>

//+----------------------------------------------------------------------------
//
//  Global Variables
//
//+----------------------------------------------------------------------------
var localItems = new Array();
var items = new Array();
var numPCs = 0;
var numDevices = 0;

var CELL_TAG = "cellTag";
var INTERNAL_GUTTER_WIDTH = 34;
var KEY_LEFT= 37;
var KEY_RIGHT= 39;
var KEY_TAB= 9;
var IMAGE_1x1TRANSGIF_URL = "/Shared/Images/s.gif";
var IMAGE_LEFTARROW_URL   = "/Shared/Images/ScrollIndicatorLeftGlobal.png";
var IMAGE_RIGHTARROW_URL  = "/Shared/Images/ScrollIndicatorRightGlobal.png";
var SCROLL_LEFT = -1;
var SCROLL_RIGHT = 1;
var scrollListTable;
var movingCell = false;
var bInit = false;

function canScroll()
{
	return useArrows == "true";
}

//+----------------------------------------------------------------------------
//
//  Function:       OnInit
//  Description:    Called when the HTC is created.
//  Arguments:      none
//  Returns:        nothing
//
//+----------------------------------------------------------------------------
function OnInit()
{
	//This will fail if we are printing
	if (element.innerHTML == "" )
		open();
}

function open()
{
	if (currentStyle.useAlphaImageLoader)
		useAlphaImageLoader = currentStyle.useAlphaImageLoader;
	if (currentStyle.divWidthPX)
		divWidthPX = currentStyle.divWidthPX;
	else
		divWidthPX = divWidthPX;

	if (currentStyle.scrollIncrementPX)
		scrollIncrementPX = parseInt(currentStyle.scrollIncrementPX);
	else
		scrollIncrementPX = parseInt(scrollIncrementPX);

	if (currentStyle.scrollFreqMS)
		scrollFreqMS = parseInt(currentStyle.scrollFreqMS);
	else
		scrollFreqMS = parseInt(scrollFreqMS);

	if (currentStyle.gutterPX)
		gutterPX = parseInt(currentStyle.gutterPX);
	else
		gutterPX = parseInt(gutterPX);

	try
	{
		if (currentStyle.hasInitialFocus)
			hasInitialFocus =
				(currentStyle.hasInitialFocus.toLowerCase() == "true");
		 else 
			hasInitialFocus = (hasInitialFocus != null && hasInitialFocus.toLowerCase() == "true");
	}
	catch (ex)
	{
	}

	if (currentStyle.initialScrollCellIndex)
		initialScrollCellIndex = currentStyle.initialScrollCellIndex;

	var imgLoaderStyle = "";
	var theToolbarStyle = toolbarStyle;
	if (!theToolbarStyle)
		theToolbarStyle="";
	if ( toolbarWidth && toolbarWidth!="")
		theToolbarStyle = "width: " + toolbarWidth + ";" + theToolbarStyle;
	var str = "<table width='100%' cellspacing=0 cellpadding=0><tr><td align='left'><div><table style='" + theToolbarStyle + "' id=topTable cellspacing=0 cellpadding=0>";

	//Left Arrow
	str+="<td align=center>";
	if (useAlphaImageLoader == "true")
	{
		str+="<div id='leftArrowDiv' bgColor='red' "
			+"style='width:18; height:18;src: " + IMAGE_LEFTARROW_URL + ";'";
		str += " tabIndex='-10001' onclick='" +uniqueID + ".scrollLeft();'";
		str += "></div>";
	} else {
		str+="<div id='leftArrowDiv' bgColor='red' "
			+"style='width:18; height:18;'><img src='"
			+IMAGE_LEFTARROW_URL+"' ";
		str+=" tabIndex='-10001' onclick='" +uniqueID + ".scrollLeft();'";
		str +="></img></div>";
	}
	str +="</td>";

	//Toolbar Cells 
	str+="<td " + (divAlign && divAlign != "" ? " align='" + divAlign + "' " : "") + " ><div id=scrollListTable ";
	var theDivStyle = divStyle;
	if ( !theDivStyle )
		theDivStyle = "";
	theDivStyle ="overflow-x:hidden; white-space:nowrap;" + theDivStyle;
	if (!divWidthPX || divWidthPX == "")
		divWidthPX = "500";

	if ( !canScroll() )
		INTERNAL_GUTTER_WIDTH=0;
	theDivStyle = "width: "+(parseInt(divWidthPX)-2*INTERNAL_GUTTER_WIDTH) + ";" + theDivStyle;

	str +=" style='" + theDivStyle + "'></div></td>";

	//Right arrow
	str+="<td align=center>";
	if (useAlphaImageLoader == "true")
	{
		str+="<div  id='rightArrowDiv' " 
			+" style='width:18; height:18;"
			+" src: " + IMAGE_RIGHTARROW_URL+";'";
		str += " tabIndex='-10001' onclick='" +uniqueID + ".scrollRight();'";
		str +="></div>";
	} else {
		str+="<div  id='rightArrowDiv' " 
			+" style='width:18; height:18;'><img src='"
			+IMAGE_RIGHTARROW_URL+"' ";
		str+= " tabIndex='-10001' onclick='" +uniqueID + ".scrollRight();'";
		str += " ></img></div>";
	}
	str +="</td>";

	str+="</tr></table></div>";
	str+="</td></tr></table>";

	element.innerHTML = str;

	scrollListTable = element.all["scrollListTable"];
	bInit = true;

	if (useAlphaImageLoader == "true")
	{
		// for layout reasons, it's necessary to attach the behavior 
		//AFTER the elements are in the doc tree
		element.all["leftArrowDiv"].style.behavior= "url(#default#alphaImageLoader)";
		element.all["rightArrowDiv"].style.behavior= "url(#default#alphaImageLoader)";
	}
	if (useArrows == "false")
	{
		element.all["leftArrowDiv"].style.display= "none";
		element.all["rightArrowDiv"].style.display= "none";
	}
	localItems = new Array();

	localItems[localItems.length++] = CreateUSBLink();

	//If we are broadband (i.e. WAN Connection is not a Modem 
	//OR if we have a home network, then show the pcs.
	if ( GetHomeNetworkStatus() == HN_Y || GetWanConnectionType() == CONN_BB)
	{
		localItems[localItems.length++] = CreateAllPCLink();
	}

	Sink.AttachEvent(TVShell.StorageManager,"OnDeviceRemove" , OnDeviceCountChange);
	Sink.AttachEvent(TVShell.StorageManager,"OnDeviceAdd" , OnDeviceCountChange);	
	Sink.AttachEvent(TVShell.ConnectionManager.HomeNetworking,"OnHostHandler" , OnHostHandler);	
	refresh();
}

function close()
{
	Sink.DetachEvent(TVShell.StorageManager,"OnDeviceRemove" , OnDeviceCountChange);
	Sink.DetachEvent(TVShell.StorageManager,"OnDeviceAdd" , OnDeviceCountChange);	
	Sink.DetachEvent(TVShell.ConnectionManager.HomeNetworking,"OnHostHandler" , OnHostHandler);	
}

function OnDeviceCountChange()
{
	refreshDeviceCount();
}

function OnHostHandler()
{
	refreshDeviceCount();
}


function OnPropertyChange()
{
	//refresh(); Let the client do this manually.
}

function OnDocReady()
{
	if (bInit && initialScrollCellIndex > 0 
		&& initialScrollCellIndex < getCellCount())
		setInitialScroll();
}

//public method
function removeAllTools()
{
	items = new Array();
	refresh();
}

//public method
function addTool( name, serviceEntry, params ) 
{
//	TVShell.Message( 'Adding entry ' + name + ' ' + serviceEntry);
	items[items.length++] = CreateCell(name, serviceEntry, params);
	refresh();
}

function addToolWithScript( name, script ) 
{
	items[items.length++] = CreateCellWithScript(name,script);
	refresh();
}

//public method
function refresh() 
{
	scrollListTable.innerHTML = '';
	var i = 0;
	var numAdded = 0;
	var interPad = parseInt(extraInterCellPadding);
	for ( i = 0; i < localItems.length ; i++ )
	{
		if (numAdded > 0 && interPad > 0)
			addPadding( interPad );
		addCellHTML( localItems[i] );
		numAdded++;
	}
	for ( i = 0; i < items.length ; i++ )
	{
		if (numAdded > 0 && interPad > 0)
			addPadding( interPad );
		addCellHTML( items[i] );
		numAdded++;
	}

	numCells = numAdded;
	refreshDeviceCount();
}

function refreshDeviceCount()
{
	CountDevicesAndPCs();
	if (element.all.numPCsId != null)
		element.all.numPCsId.innerHTML="(" + numPCs + ")";
	if (element.all.numDevicesId != null)
		element.all.numDevicesId.innerHTML="(" + numDevices + ")";
}

//public method

function executeScript( script )
{
	eval(script);
	return false;
}

function GotoExplorer( numItems, type )
{
	if ( numItems == 1 )
	{
		var viewer = "Video";
		if (application == "video" )
			viewer = "Video/Viewer.html";
		else if ( application == "photo")
			viewer = "Photo/Viewer.html";
		else if ( application == "music")
			viewer = "Music/Viewer.html";
		
		//TBD: get folder name:	TVShell.URL = viewer;
		TVShell.URL = 'msntv:/MediaNav/MediaNav.html?fromApplication='
		      + application + '&mediaLocation=' + type;
	}
	else
	{
		TVShell.URL = 'msntv:/MediaNav/MediaNav.html?fromApplication='
		      + application + '&mediaLocation=' + type;
	}

	return false;
}

//public method
function gotoPCExplorer()
{
	GotoExplorer( numPCs, "pc" );
	return false;
}

//public method
function gotoUSBExplorer()
{
	GotoExplorer( numDevices, "usb" );
	return false;
}

function CountDevicesAndPCs()
{
	numDevices = numUSB();
	numPCs = numberPCs();
}


function CreateCellWithScript( name, script ) 
{
	var htmlStr = "<a id='ToolItem-"+ name +"' onclick='" + uniqueID + ".executeScript(\""+ script + "\");'><b>" + name + "</b></a>";
	return htmlStr;
}

function CreateCell( name, serviceEntry, params )

{
	var htmlStr = "<a id='ToolItem-"+name +"' onclick='GotoTarget(\""+ serviceEntry + "\", \"" + params + "\", false);'><b>" + name + "</b></a>";

	return htmlStr;
}

function CreateAllPCLink() 
{
	var htmlStr = "<a id='ToolItem-"+pcsText+"' onclick='" + uniqueID + ".gotoPCExplorer();'><b>"
	+ pcsText + " <span id='numPCsId'></b></span></a>";

	return htmlStr;
}

function CreateUSBLink() 
{
	var htmlStr = "<a id='ToolItem-"+usbText+"' onclick='" + uniqueID + ".gotoUSBExplorer();'><b>"
	+ usbText + " <span id='numDevicesId'></b></span></a>";

	return htmlStr;
}

function focus()
{
	var span = scrollListTable.all[CELL_TAG+initialScrollCellIndex];
	span.focus();
}

function setInitialScroll()
{
	var pixelToScroll = 0;
	for (var i = 0; i < initialScrollCellIndex; i++)
		pixelToScroll += getCell(i).clientWidth;

	var span = scrollListTable.all[CELL_TAG+initialScrollCellIndex];

	if (span 
	    && scrollListTable.scrollWidth - pixelToScroll >= scrollListTable.clientWidth)
	{
		scrollListTable.scrollLeft = pixelToScroll;
		if (scrollListTable.scrollLeft == 0 && pixelToScroll > 0)
		{
			window.setTimeout(setInitialScroll, 1);
			return;
		}
		if (hasInitialFocus)
			span.focus();
	}
}

function addCellHTML(cellHTML)
{
	if (!bInit)
		return;
		var numChildren = getCellCount();

	var theItemStyle = itemStyle;
	if (!theItemStyle)
		theItemStyle="";
	if ( itemWidth && itemWidth != "")
		theItemStyle = "width: " + itemWidth + ";" + theItemStyle;

	var str = "<SPAN ID='"+CELL_TAG+numChildren+"' nextLeft='"
		+(numChildren > 0 ? CELL_TAG+(numChildren-1) : "")
		+"' ";
	str += " style='" + theItemStyle + "' ";
	str+= "nextRight='"+CELL_TAG+"0' onfocus=this.firstChild.focus() >";

	var cell = element.document.createElement(str);
	cell.style.display = "inline-block";

	scrollListTable.appendChild(cell);
	var innerCell = element.document.createElement("SPAN");
	cell.appendChild(innerCell);
	cell.innerHTML = cellHTML;
	if (numChildren > 0)
	{
		var lastCell = getCell(numChildren-1);
		var attr = element.document.createAttribute("nextRight");
		attr.value = cell.id;
		lastCell.attributes.setNamedItem(attr);
	}
}

function addPadding( padding )
{
	if (!bInit)
		return;
	var halfP = padding /2;
	var str = "<SPAN style='padding-left: " + halfP 
	  + "; padding-right: " + halfP + ":'>";

	var cell = element.document.createElement(str);
	cell.style.display = "inline-block";
	cell.innerText = " ";

	scrollListTable.appendChild(cell);
}

function OnKeydownHandler()
{
	var handled = false;
	var srcNode = event.srcElement;
	if (srcNode.id.indexOf(CELL_TAG) == -1)
		srcNode = srcNode.parentNode;

	if (!movingCell && canScroll() )
	{
		var k = event.keyCode;
		if (k == KEY_TAB)
		{
			if (event.shiftKey)
				k = KEY_LEFT;
			else
				k = KEY_RIGHT;
		}

		switch(k)
		{
		case KEY_LEFT:
			movingCell = true;
			var nextLeft = srcNode.attributes.getNamedItem("nextleft");
			if (!nextLeft || !all[nextLeft.value])
			{
				var gap = (scrollListTable.scrollLeft == srcNode.offsetLeft ?
						0 : gutterPX);
				moveCellToTheOtherEnd(getCellCount()-1);
				scrollListTable.scrollLeft = getCell(2).offsetLeft - gap;
				scroll(SCROLL_LEFT, getCell(1).offsetLeft-gutterPX, getCell(0).id);
				handled = true;
			} else {
				var nextSpan = all[nextLeft.value];
				setTimeout( function() { nextSpan.focus(); }, 1 );
				movingCell = false;
			}
			break;

		case KEY_RIGHT:
			movingCell = true;
			var nextRight = srcNode.attributes.getNamedItem("nextright");
			if (nextRight)
			{
				var scrollTarget = 0;
				var nextSpan = all[nextRight.value];
				var sl = scrollListTable.scrollLeft;
				scrollTarget = nextSpan.offsetLeft
					+ gutterPX + nextSpan.clientWidth
					- scrollListTable.clientWidth;

				if (/*<*/scrollTarget > sl)
				{
					scroll(SCROLL_RIGHT, scrollTarget, nextSpan.id);
				}
				else
				{
					movingCell = false;
					nextSpan.focus();
				}
				handled = true;
			}
			else
			{
				movingCell = false;
			}
			break;
		}
	}
	else if (canScroll())
	{
		handled = true;
	}

	if (handled)
	{
		event.returnValue=false;
		event.cancelBubble=true;
		return false;
	}
	else 
	{
		return true;
	}
}

function scrollLeft() 
{
	if (canScroll())
	{
		if ( scrollListTable.scrollLeft > scrollIncrementPX )
			scrollListTable.scrollLeft -= scrollIncrementPX;
		else
			scrollListTable.scrollLeft = 0;
	}
}

function scrollRight() 
{
	if (canScroll())
	{
		scrollListTable.scrollLeft =
			 scrollListTable.scrollLeft + scrollIncrementPX;
	}
}

function scroll(direction, target, cellToFocusID)
{
	var func = scroll;
	var wasDeferred = (func.arguments.length > 3 ? func.arguments[3] : false);

	if ( !canScroll() )
	{
		//TVShell.Message( "Not scrolling" );
	}
	else if ((direction == SCROLL_RIGHT && scrollListTable.scrollLeft < target)
		||(direction == SCROLL_LEFT && scrollListTable.scrollLeft > target))
	{
		var nextLeft = scrollListTable.scrollLeft + scrollIncrementPX*direction;
		var desiredLeft = ((direction == SCROLL_RIGHT && nextLeft > target)
		  ||(direction == SCROLL_LEFT && nextLeft < target) ? target:nextLeft);

		scrollListTable.scrollLeft = desiredLeft;
		if ( scrollListTable.scrollLeft == desiredLeft )
		{
			window.setTimeout( function(){scroll(direction, target, cellToFocusID,true);}, 1);
		} else {
			var shift = getCell(0).clientWidth;
			if (direction == SCROLL_RIGHT )
			{
				moveCellToTheOtherEnd(0);
				if (shift <= scrollListTable.scrollLeft)
					scrollListTable.scrollLeft -= shift;
				else
					scrollListTable.scrollLeft = 0;
			}
			all[cellToFocusID].focus();
			movingCell = false;
		}
	}
	else
	{
		var shift = getCell(0).clientWidth;
		if (direction == SCROLL_RIGHT && shift <= scrollListTable.scrollLeft)
		{
			moveCellToTheOtherEnd(0);
			scrollListTable.scrollLeft -= shift;
		}
		all[cellToFocusID].focus();
		movingCell = false;
	}
}

function moveCellToTheOtherEnd(cellIndexToMove)
{
	var tempCell = getCell(cellIndexToMove);
	var attr = element.document.createAttribute("nextleft");
	var tag = getCell(0).attributes.getNamedItem("nextright").value;
	attr.value = CELL_TAG+((tag.substr(CELL_TAG.length)-2+getCellCount()) % getCellCount());
	getCell(0).attributes.setNamedItem(attr);
	scrollListTable.removeChild(tempCell);
	scrollListTable.insertBefore(tempCell, cellIndexToMove == 0 ?
		null : getCell(0));
	attr = element.document.createAttribute("nextleft");
	attr.value = "";
	getCell(0).attributes.setNamedItem(attr);
}

function getCell(index)
{
	return scrollListTable.children[index];
}

function getCellCount()
{
	return (scrollListTable.children ? scrollListTable.children.length : 0);
}

function getCellContent(index)
{
	if (!bInit)
		return null;
	else
		return getCell(index).firstChild;
}

</SCRIPT>

</PUBLIC:COMPONENT>
