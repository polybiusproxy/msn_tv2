<!-- ---------------------------------------------------------------------
//
//  Copyright 2004 Microsoft Corporation.  All Rights Reserved.
//
//  File:         SlideshowPromo.htc
//
//  Description:  The SlideshowPromo HTML behavior implements a reusable
//				  DHTML component capable of displaying a rotating sequence
//				  of ``slides''.  The HTC uses the sourceURL to obtain an
//				  XML document. There is no requirement on this XML data.
//				  The XML document obtained is transformed using the specified
//				  XSL stylesheet. The resulting XML must be of the form:
//				 	<slides>
//						<div> ... </div>
//						<div> ... </div>
//						...
//						<div> ... </div>
//				 	</slides>
//				  The body of the individual DIVs may be any valid XHTML.
//				  The slideshow promo will sequence through each of these
//				  displaying the individual div.
//
//				  The properties:
//					'sourceUnavailableText' - XHTHML that will be displayed
//						if the source is not available. 
//					'stylesheetUnavailableText' - XHTML that will be displayed
//						if the stylesheet is not available
//					'noSlidesText' - XHTML to display if there are no
//						slides.
//					'loadingText' - XHTML to display the very first time
//						while loading the XML document.
//
//-------------------------------------------------------------------- -->

<PUBLIC:COMPONENT tagname="slideShowPromo" lightweight=true>

<!-- Public Methods. -->
<PUBLIC:METHOD NAME="open" />
<PUBLIC:METHOD NAME="close" />
<PUBLIC:METHOD NAME="play" />
<PUBLIC:METHOD NAME="pause" />
<PUBLIC:METHOD NAME="next" />
<PUBLIC:METHOD NAME="prev" />
<PUBLIC:METHOD NAME="refresh" />
<PUBLIC:METHOD NAME="fireSlideEvent" />
<PUBLIC:METHOD NAME="ssInvoke" />
<PUBLIC:METHOD NAME="decrementSlideIndex" />
<PUBLIC:METHOD NAME="incrementSlideIndex" />
<PUBLIC:METHOD NAME="getSlideHTML" />
<PUBLIC:METHOD NAME="hasFocus" />
<PUBLIC:METHOD NAME="lostFocus" />
<PUBLIC:METHOD NAME="restoreFocus" />

<PUBLIC:PROPERTY NAME="filter" value="blendTrans(duration=0.6)" />
<!-- PUBLIC:PROPERTY NAME="filter" value="progid:DXImageTransform.Microsoft.Fade(Overlap=0.2, Duration=0.5)" -->
<PUBLIC:METHOD NAME="onAutoAdvanceTimeout" />
<!-- Configuration Attributes. Set these before calling open -->
<PUBLIC:PROPERTY NAME="autoStart" value=false />
<PUBLIC:PROPERTY NAME="autoAdvanceInterval" value=8 />
<PUBLIC:PROPERTY NAME="stylesheetURL" value="" />
<PUBLIC:PROPERTY NAME="startIndex" value="0" />
<PUBLIC:PROPERTY NAME="sourceUnavailableText" value="Go online to see more" />
<PUBLIC:PROPERTY NAME="stylesheetUnavailableText" value="Unable to view content" />
<PUBLIC:PROPERTY NAME="noSlidesText" value="There are no articles at present" />
<PUBLIC:PROPERTY NAME="loadingText" value="Looking up information of interest to you" />
<PUBLIC:PROPERTY ID="sourceURLID" NAME="sourceURL" GET="GetSourceURL" PUT="PutSourceURL" />
<PUBLIC:PROPERTY NAME="textStyle" value="" />

<!-- Status Attributes. These should be treated as read-only. They are
     set by the HTC to let the client know about the state of the HTC. -->
<PUBLIC:PROPERTY ID="playStateID" NAME="playState" GET="GetPlayState" PUT="PutPlayState" />
<PUBLIC:PROPERTY ID="currentIndexID" NAME="currentIndex" GET="GetCurrentIndex" PUT="PutCurrentIndex" />
<PUBLIC:PROPERTY ID="numItemsID" NAME="numItems" GET="GetNumItems" PUT="PutNumItems" />

<!-- Events. These callbacks are invoked to notify the client when
  the HTC changes -->
<PUBLIC:EVENT ID="onPlayStateChangeID" NAME="onPlayStateChange" />
<PUBLIC:EVENT ID="onSlideEventID" NAME="onSlideEvent" />
<PUBLIC:EVENT ID="onTransitionID" NAME="onTransition" />
<PUBLIC:EVENT ID="onDebugID" NAME="onDebug" />
<PUBLIC:ATTACH EVENT="onkeydown" FOR="document" HANDLER="handleKeydown" />

<PUBLIC:ATTACH EVENT="oncontentready" HANDLER="Init" />

</PUBLIC:COMPONENT>

<!-- HTC Implementation  -->
<!-- You must include these scripts when using SlideshowPromo.htc
<script LANGUAGE=Javascript SRC="../Javascript/TVShell.js"></script>
<script LANGUAGE=Javascript SRC="msntv:/Javascript/VKCodes.js"></script>
<script language="javascript" src="msntv:/Javascript/DMRHome.js"></script>
<script language="Javascript" src="msntv:/Javascript/DMRCommon.js"></script>
<script language="Javascript" src="msntv:/Javascript/DMREnumerate.js"></script>
<script LANGUAGE=Javascript SRC="msntv:/Photo/Photos.js"></script>
-->
<SCRIPT language="JavaScript" type="text/javascript">

function createSSPEvent()
{
   	oEvent = createEventObject();
	oEvent.playState = playState;
	oEvent.uniqueID = uniqueID;
	oEvent.id = element.id;

	return oEvent;
}

function Debug( msg )
{
	//TVShell.Message( element.id + ": " + msg );
	oEvent = createSSPEvent();
	oEvent.msg = msg;
	onDebugID.fire(oEvent);   
}

var PS_PLAY				= "Playing";
var PS_PAUSED			= "Paused";
var AUTO_ADVANCE_TIMEOUT_INTERVAL;
var MIN_FOCUS_TIMEOUT_INTERVAL = 5000;

// Used by next/prev. This is the desired photo location.
// The desired image index is used by the javascript to keep track
// of where it would like the slideshow to be at. It will be distinct
// from the actual image diplayed by slideshow until the show
// catches up with it.
var curIndex = -1;
var playState = PS_PAUSED;
var desiredPlayState_Index = -1;;
var inited = false;
var autoAdvanceTimeout = -1;
var playState_FirstNotification = true;
var sourceURL = null;
var xmlDoc = null;
var numSlides = 0;
var htmlSlideSource = new Array();

var commandQueue = new Array();
var commandQueueTimeoutId = -1;

var STOP_COMMAND_PROCESSING = false;
var CONTINUE_COMMAND_PROCESSING = true;

function ExecCommand(cmd)
{
	if ( commandQueue.length == 0 )
		eval( cmd );
	else 
		PushCommand(cmd);
}

function PushCommand(cmd)
{
	commandQueue.push( cmd );
	RestartCommandProcessing();
}

function RestartCommandProcessing()
{
	if (commandQueue.length > 0 && commandQueueTimeoutId == -1 )
		commandQueueTimeoutId = setTimeout( DrainCommandQueue, 1 );
}

function DrainCommandQueue()
{
	commandQueueTimeoutId = -1;

	var cmd2 = commandQueue.shift();
	//Debug( uniqueID + ': eval cmd=' + cmd2);
	if (cmd2) 
	{
		var res = eval( cmd2 );

		if ( res != STOP_COMMAND_PROCESSING )
			RestartCommandProcessing();
//		else
//			Debug( "Pausing command processing" );
	}
}

function ClearCommandQueueTimeout()
{
	if (commandQueueTimeoutId != -1)
		clearTimeout( commandQueueTimeoutId );
	commandQueueTimeoutId = -1;
}

////////////////////////////////////
//
// Initial Function
//
////////////////////////////////////
var Init_called = false;

function Init()
{
	if ( element.innerHTML !=  "" )
		return;//we must be printing. ignore this init.

	Init_called = true;

	if (autoStart != null && autoStart.toLowerCase() == "true" )
	{
		open();
		play();
	}
}

//////////////////////////////////////
//
// Public Methods
//
////////////////////////////////////
//Public method
function open()
{
	close();
	DoOpen();
}

function DoOpen()
{
	//Debug( "DoOpen" );

	playState = PS_PAUSED;
	ClearRestoreTimeout();
	StopAutoAdvance();

	if ( autoAdvanceInterval < 1 )
		autoAdvanceInterval = 1;
	else if ( autoAdvanceInterval > 30 )
		autoAdvanceInterval = 30;

	AUTO_ADVANCE_TIMEOUT_INTERVAL= autoAdvanceInterval * 1000;

	//Now generate the HTML.
	for (var i = element.childNodes.length -1; i >= 0; --i)
		element.removeChild(element.childNodes[i]);
		
	var slideShowHtml=
'<table cellpadding=0 cellspacing=0 ' +
'      height="100%"'+
'      width="100%"'+
'      ID="_MainArea" ' +
' >' +
'	<tr id="_row" ' +
'       height="100%"' +
'       width="100%"> ' +
'		<td id="_cell" style="' + textStyle + '" align="center" vAlign="middle" ' +
'        height="100%" ' +
'        width="100%"> ' +
'        <span id="_span" style="PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT: 9pt/1.3 verdana;">' +
'			</span> ' +
'		</td> ' +
'	</tr>'+
'</table> ';

	element.innerHTML = slideShowHtml;

	//Call the function directly and leave the command queue alone
	//until we've done everything.

	inited 			= true;

	return DoRefresh();
}


function SetInnerHTML( html )
{
	var span = element.all._span;
	if ( span )
		span.innerHTML = html;
	else
		Debug( 'SlideshowPromo:Not ready: Ignoring ' +html);
}

var Refresh_FirstLoad = true;
var Refresh_LoadingXML = false;
//Public method
function refresh() 
{
	if (Init_called == true)
		PushCommand('DoRefresh()' );
}

function DoRefresh()
{
	//Debug( "DoRefresh: playState="+ playState + " timerId="+ autoAdvanceTimeout);
	if (Refresh_FirstLoad)
		SetInnerHTML( loadingText );

	if ( !sourceURL || sourceURL=="")
	{
		SetInnerHTML( sourceUnavailableText );		
		return CONTINUE_COMMAND_PROCESSING;
	}

	Refresh_LoadingXML = true;

	//Changed to not do a new ActiveXObject("Msxml2.DOMDocument");
	//This was done to avoid security problems on XP.
	xmlDoc = TVShell.CreateXmlDocument();
	if (xmlDoc) 
	{
		xmlDoc.async = true;
		xmlDoc.resolveExternals = false;
		xmlDoc.validateOnParse = false;
		xmlDoc.onreadystatechange=OnReadyStateChange;
		xmlDoc.ondataavailable=OnReadyStateChange;
		var res = xmlDoc.load(sourceURL);

		if ( res == false
			 || (xmlDoc && xmlDoc.parseError && xmlDoc.parseError.errorCode != 0) )
		{
			if (Refresh_FirstLoad)
				SetInnerHTML( sourceUnavailableText );

			return CONTINUE_COMMAND_PROCESSING;
		}
	}

	var res = 	Refresh_LoadingXML == true ?
		STOP_COMMAND_PROCESSING : CONTINUE_COMMAND_PROCESSING;

	return res;
}

function OnReadyStateChange()
{
	if (xmlDoc && xmlDoc.readyState == 4 && Refresh_LoadingXML == true) 
	{
		Refresh_LoadingXML = false;
		ReadSlideInfo();
	}
}

function ReadSlideInfo()
{
	if (xmlDoc)
	{
		Refresh_FirstLoad = false;
		ShowSlide_Index = -1;

		var stylesheet = new ActiveXObject("Msxml2.DOMDocument");
		stylesheet.async = false;

		if ( !stylesheet.load(stylesheetURL) ) 
		{
			if (Refresh_FirstLoad)
				SetInnerHTML( stylesheetUnavailableText );
		} else {

			//Changed to not do a new ActiveXObject("Msxml2.DOMDocument");
			//This was done to avoid security problems on XP.
			var result = TVShell.CreateXmlDocument();
			result.async = false;
			result.validateOnParse = true;//true;

			xmlDoc.transformNodeToObject(stylesheet, result);
			
			htmlSlideSource = result.selectNodes("/slides/div");
			numSlides = htmlSlideSource && htmlSlideSource.length > 0 ?
				htmlSlideSource.length : 0;

			if ( numSlides == 0 )
			{
				SetInnerHTML( noSlidesText );
			}
			else
			{
				var i = parseInt(startIndex);
				if ( i < 0 ) i = 0;
				if ( i >= numSlides ) i = numSlides - 1;

				if ( i >= 0 ) ShowSlide( i, true );

				if ( playState != PS_PLAY )
					InternalPutPlayState(PS_PAUSED);
				ShowSlide_Index = i;
				if ( playState == PS_PLAY )
					StartAutoAdvance();
			} 
		}
	}

	xmlDoc = null;

	RestartCommandProcessing();
}

//Public method
function close()
{
	commandQueue = new Array();
	ClearCommandQueueTimeout();
	ClearRestoreTimeout();
	StopAutoAdvance();
}

//Public method
function play()
{
	PushCommand('DoPlay()' );
}

function DoPlay()
{
	//Debug( "DoPlay" );
	var oldState = playState;

	InternalPutPlayState(PS_PLAY);

	if ( inited == false )
	{
		autoStart = true;
		return DoOpen();
	}

	if (numSlides <= 1)
	{
		if ( numSlides == 1 && ShowSlide_Index == -1)
			ShowSlide(0,true);
		return CONTINUE_COMMAND_PROCESSING;
	}

	var diff = new Date().getTime() - ShowSlide_LastTime;
	if ( ShowSlide_Index == -1 || (diff > AUTO_ADVANCE_TIMEOUT_INTERVAL) ) 
	{
		StopAutoAdvance();
		ShowSlide( Increment(GetDesiredIndex()), false );
	}

	StartAutoAdvance();

	return CONTINUE_COMMAND_PROCESSING;
}

//Public method
//Unlike Play, Pause takes effect immediately.
function pause()
{
	if ( inited == false )
	{
		autoStart = false;
		PushCommand('DoOpen()' );
		return;
	}

	if (numSlides <= 1)
		return;

	InternalPutPlayState(PS_PAUSED);

	ClearRestoreTimeout();
	ClearCommandQueueTimeout();

	StopAutoAdvance();
}


//Public method
function prev()
{
	if ( inited == false )
	{
		PushCommand('DoOpen()' );
		return;
	}

	if (numSlides <= 1)
		return;

	desiredPlayState_Index = Decrement(GetDesiredIndex());

	ShowSlide( desiredPlayState_Index, true );

	if (playState == PS_PLAY)
		StartAutoAdvance();
}

//Public method
function next()
{
	if ( inited == false )
	{
		PushCommand('DoOpen()' );
		return;
	}

	if (numSlides <= 1)
		return;

	desiredPlayState_Index = Increment(GetDesiredIndex());

	ShowSlide( desiredPlayState_Index, true );
	if (playState == PS_PLAY)
		StartAutoAdvance();
}

//Public method. This passes all of the arguments 
//to the event handlers as properties of the event object.
function fireSlideEvent()
{
	event.cancelBubble = true;
	oEvent = createSSPEvent();

	oEvent.params = fireSlideEvent.arguments;
	for ( var i = 0; i < fireSlideEvent.arguments.length ; i++)
	{
		oEvent["param" + i] = fireSlideEvent.arguments[i];
	}

	onSlideEventID.fire(oEvent);   
}

//Public method
function ssInvoke( action )
{
	event.cancelBubble = true;

	if ( action == 'next' )
		next();
	else if ( action == 'prev' )
		prev();
	else if ( action == 'pause' )
		pause();
	else if ( action == 'play' )
		play();
	else if ( action == 'refresh' )
		refresh();
}

//Public method
function decrementSlideIndex( i )
{
	return Decrement(i);
}

//Public method
function incrementSlideIndex( i )
{
	return Increment(i);
}

//Public method
function getSlideHTML( slideIndex )
{
	var html = "";
	try
	{
		html = htmlSlideSource.item(slideIndex).xml;
		//This really should be done when we transform the
		//xml into html, but there are issues ...
		html = html.replace(/@promo::uniqueID@/g,uniqueID);
	}
	catch (ex) 
	{
		//keep debug stmt on one line to make it easier to turn on/off
		//by using search replace
		//Debug("Failed to get slideIndex=" + slideIndex + " numSlides="+htmlSlideSource.length );
		html = null;
	}

	return html;
}

////////////////////////////////////
//
// Attribute Getters/Setters
//
////////////////////////////////////
//- Utility func for setting an attribute
function FireEvent(eventID,varName, newVal, oldVal)
{
	oEvent = createSSPEvent();

	oEvent.varName = varName;
	oEvent.newValue = newVal;
	oEvent.oldValue = oldVal;

	oEvent[varName] = newVal;

	eventID.fire(oEvent);
}

function InternalPut(varName, varID, eventID, oldVal, newVal, forceNotification )
{
	if (Init_called == true && oldVal != newVal || forceNotification == true)
	{
		if ( eventID )
			FireEvent(eventID,varName, newVal, oldVal);
		if (varID)
			varID.fireChange();
	}

	return newVal;
}

//
// sourceURL Attribute
//
function GetSourceURL() { return sourceURL; }

function PutSourceURL(v) 
{
	var old = sourceURL;
	sourceURL = v;
	InternalPut("sourceURL", sourceURLID, null, old, v, false);

	refresh();

	return sourceURL;
}

//
// playState Attribute
//
function GetPlayState() { return playState != PS_PAUSED ?PS_PLAY :PS_PAUSED;}

function PutPlayState(v) 
{
	//Debug( "playState is read only" );
}

function InternalPutPlayState(newState) 
{
	if ( newState != PS_PAUSED )
		newState = PS_PLAY;
	var old = playState;
	playState = newState;
	InternalPut( "playState", playStateID, onPlayStateChangeID, old, newState, playState_FirstNotification);

	playState_FirstNotification = false;

	return playState;
}

//
// currentIndex Attribute
//
function GetCurrentIndex() 
{
	return curIndex;
}

function PutCurrentIndex(v) 
{
	//Debug( "currentIndex is read only" );
}

function InternalPutCurrentIndex(newVal) 
{
	var old = curIndex;
	curIndex = newVal;
	InternalPut( "currentIndex", currentIndexID, onTransitionID, old, newVal, false);
	return curIndex;
}

//
// numSlides Attribute
//
function GetNumItems() 
{
	return numSlides;
}

function PutNumItems(v) 
{
	//Debug( "numItems is read only" );
}

////////////////////////////////////
//
// Private Utility Methods
//
////////////////////////////////////
function GetDesiredIndex()
{
	var idx = desiredPlayState_Index;
	if ( idx == -1 )
		idx = ShowSlide_Index;
	return idx;
}

function Increment( value )
{
	value++;
	if(value >= numSlides)
		value=0;
	return value;		
}

function Decrement( value )
{
	value--;
	if(value < 0)
		value=numSlides-1;
	return value;		
}

var currentFocusedId = null;
var timeOfLastFocus = null;
function lostFocus( id )
{
	currentFocusedId = null;
	//Debug( "clearing focus. Focus is now " + currentFocusedId );
}

function hasFocus( id )
{
	currentFocusedId = id;
	timeOfLastFocus = new Date().getTime();
	//Debug( "Tracking focus. Focus is now " + currentFocusedId );
}


var idToReceiveFocus = null;
var restoreFocusTimeoutId = -1;
function restoreFocus()
{
	var slideIndex = ShowSlide_Index;
	var focusedId = idToReceiveFocus;

	if (focusedId != null && element.all[focusedId] != null )
	{
		try
		{
			//Debug( 'setting focus on slide ' + slideIndex + ' to ' + focusedId );
			var ElementToFocus = element.all[focusedId];
			if(ElementToFocus)
			{ 
				if(ElementToFocus.length && ElementToFocus[0])
					ElementToFocus[0].focus();
				else
					ElementToFocus.focus();
			}
			//Debug( 'setting focus to ' + focusedId + ' succeeded');
		}
		catch (ex)
		{
			//keep debug stmt on one line to make it easier to turn on/off
			//by using search replace
			Debug( "Failed setting focus to " + focusedId + " " + ex + " " + ex.message );
		}
	}
	else if ( focusedId != null )
	{
		Debug( "Unable to give focus to missing element. looking for id=" + focusedId );
	}
}

function ClearRestoreTimeout()
{
	if (restoreFocusTimeoutId != -1)
		clearTimeout( restoreFocusTimeoutId );
	restoreFocusTimeoutId = -1;
}

//Delay transitions when any key is pressed.
function handleKeydown()
{
	timeOfLastFocus = new Date().getTime();
	return true;
}

var ShowSlide_First = true;
var ShowSlide_Index = -1;
var ShowSlide_LastTime = new Date().getTime();

function ShowSlide(slideIndex, skipTo)
{
	//Debug( "ENTERING ShowSlide(" + slideIndex + ") " + new Date().getTime() );

	if (ShowSlide_First)
		skipTo = true;
	ShowSlide_First = false;

	//Reset the desired index to be -1.
	if ( slideIndex == desiredPlayState_Index )
		desiredPlayState_Index = -1;

	if ( slideIndex != ShowSlide_Index ) 
	{
		var elem = element.all._MainArea;

		var filterObj = null;
		if ( elem )
		{
			elem.style.filter=( skipTo ? null : filter );
	
			if ( elem.style.filter && elem.filters
				 && elem.filters.length > 0)
				filterObj = elem.filters[0];
		}

		idToReceiveFocus = currentFocusedId;
		var html = getSlideHTML( slideIndex );
		if ( html == null )
			html = noSlidesText;

		if (filterObj)
			filterObj.Apply();

		ShowSlide_LastTime = new Date().getTime();
		SetInnerHTML( html );

		//Okay the transition is complete, but before the filter has run.
		InternalPutCurrentIndex(slideIndex);

		if (filterObj)
			filterObj.Play();

		//We have to return to the main loop before we can safely
		//set the focus on the newly created elements.
		restoreFocusTimeoutId = setTimeout( restoreFocus, 1 );

		ShowSlide_Index = slideIndex;
	}
	//Debug( "LEAVING ShowSlide(" + slideIndex + ")" );
}	

var curTimer = 0;
function StartAutoAdvance()
{
	StopAutoAdvance();

	if (playState == PS_PLAY)
	{
		//Debug( "Starting AutoAdvance" );
		autoAdvanceTimeout =
			setTimeout( uniqueID +'.onAutoAdvanceTimeout('+curTimer+')', AUTO_ADVANCE_TIMEOUT_INTERVAL );
	}
}

function onAutoAdvanceTimeout(  timerId )
{
	if ( curTimer == timerId )
	{
		var oldTimeout = autoAdvanceTimeout;

		autoAdvanceTimeout = -1;

		if (playState == PS_PLAY && oldTimeout != -1)
		{
			var curTime = new Date().getTime();
			if ( (curTime - timeOfLastFocus) > MIN_FOCUS_TIMEOUT_INTERVAL )
			{
				ShowSlide( Increment(GetDesiredIndex()), false );
				// Now queue up next change
				StartAutoAdvance();
			}
			else
			{
				var realInterval = AUTO_ADVANCE_TIMEOUT_INTERVAL;
				AUTO_ADVANCE_TIMEOUT_INTERVAL = MIN_FOCUS_TIMEOUT_INTERVAL;
				//Just wait this shorter interval before trying again.
				//Debug( "Delaying transition because of focus change" );
				StartAutoAdvance();
				AUTO_ADVANCE_TIMEOUT_INTERVAL = realInterval;
			}
		}
	}
}

function StopAutoAdvance()
{
	//Debug( "Stopping auto advance" );
	curTimer++;

	if ( autoAdvanceTimeout != -1 )
		clearTimeout( autoAdvanceTimeout );
	autoAdvanceTimeout = -1;
}
</SCRIPT>


